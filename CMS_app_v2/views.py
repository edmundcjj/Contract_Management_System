# Importing the necessary modules to be utilized in this file
from django.shortcuts import render
from CMS_app_v2.models import Document
from CMS_app_v2.forms import DocumentForm

# Retrieve and count number of documents of a particular status and return that number
def filter_objects(document_status):
    """
        Filter and retrieve objects from the database of a particular status and
        count how many there are

        The function takes in one parameter of string type, search through the
        database for objects with the provided parameter and save the objects into
        a list. Number of objects in the list will be counted and returned as a
        string type.

        Parameters
        ----------
        document_status : str
            This refers to the status of the object, an attribute of the object.
            Values of status can be:
            - Draft
            - Pending Approval
            - Pending Acceptance
            - Active
            - Closed

        Returns
        -------
        count : str
            Value contains the number of objects with the provided status
            Initialized as an integer, converted to string when being returned
    """
    docs = Document.objects.filter(status=document_status)
    count = 0
    for document in docs:
        count += 1
    return str(count)

# Function based view to return to index page (dashboard.html)
def index(request):
    """
        Function that contains whatever arbitrary logic is necessary to return that
        response.

        The function takes in a web request and returns a web response. The response
        contains the HTML content which is used to populate content in the HTML.
        HTML content is generated by calling the filter_objects function to find
        out the number of objects with a particular status.

        Parameters
        ----------
        request : object
            Web request object which is needed to generate the web response

        Returns
        -------
        render(request, template_name, context) : Django shortcut function
            request:        request object provided
            template_name:  Full name of template to be used, essentially the
                            HTML file
            context:        A dictionary of values to add to the template context.
                            By default, this is an empty dictionary.
                            If a value in the dictionary is callable, the view will call it just before rendering the template.

    """
    print("Returning to index")
    draft_count = filter_objects('draft')
    pending_approval_count = filter_objects('PAP')
    pending_acceptance_count = filter_objects('PAC')
    active_count = filter_objects('active')
    closed_count = filter_objects('closed')
    return render(request, 'CMS_app_v2/index.html', {'draft_documents' : draft_count,
                                                     'pending_approval_documents' : pending_approval_count,
                                                     'pending_acceptance_documents' : pending_acceptance_count,
                                                     'active_documents' : active_count,
                                                     'closed_document' : closed_count})

# Function based view to save data collected from the form into database and
# return back to index page
def document_upload(request):
    """
        Rendering the form in the HTML and save the form details into the database

        The function takes in a web request and returns a web response. It also
        generates the form template by creating a new object of class DocumentForm.
        Checks for method of request and saves form details into database if method
        is POST, redirecting user back to index page after completing form.

        Parameters
        ----------
        request : object
            Web request object which is needed to generate the web response

        Returns
        -------
        render(request, template_name, context) : Django shortcut function
            request:        request object provided
            template_name:  Full name of template to be used, essentially the
                            HTML file
            context:        A dictionary of values to add to the template context.
                            By default, this is an empty dictionary.
                            If a value in the dictionary is callable, the view will call it just before rendering the template.
    """
    print("Enter document_upload function")
    form = DocumentForm()

    if request.method == "POST":
        form = DocumentForm(request.POST, request.FILES)
        print("Before saving form")
        if form.is_valid():
            print("Valid form + before saving")
            form.save()
            print("Valid form + form saved")

            # Return to homepage.
            print("Before returning to index")
            return index(request)
    else:
        print("FORM NO POST")
        form = DocumentForm()
    return render(request, 'CMS_app_v2/upload_contract.html', {'form': form})
